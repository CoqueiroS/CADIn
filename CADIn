#! /usr/bin/perl -w
################################################################################
# File: CADIn (Chromosomal Amplification and Deletion Inference)
# Author: Anderson Coqueiro-dos-Santos
################################################################################
use strict;
use File::Copy;
use File::Temp;
use sigtrap qw(die INT);
use Statistics::R;
use Getopt::Std;
our ($opt_i, $opt_r, $opt_a, $opt_q, $opt_f, $opt_s, $opt_t, $opt_o, $opt_v, $opt_d, $opt_k, $opt_c, $opt_x, $opt_l, $opt_n, $opt_u, $opt_m, $opt_g);
getopt('iraqfstovdkclnumg');

# Advanced Options
my ($qualit, $filter, $tmp, $threds, $output);
# Type of analysis
my ($vcfsnp, $dp4var, $qltvcf, $covgen, $covset, $covlen, $nregio);
# Statistical Parameters
my ($usingr, $median, $graphr);
# Others
my ($maindir, $reference, $bed, %covGenes, @files, %coverage, %variant);

MAIN_DIR();

TESTING_ARGUMENTS();

unless (-d $tmp) { mkdir ($tmp); }

my $tempdir = File::Temp->newdir(
                TEMPLATE => 'tmpXXXX',
                DIR => $tmp,
                CLEANUP => 1
);

### RUN MPILEUP ###
if ($vcfsnp == 1) {
    $reference = File::Temp->new(
                        TEMPLATE => 'ref_XXXX',
                        DIR => $tempdir,
                        SUFFIX => '.tmp',
                        UNLINK => 0
    );
    copy($opt_r, $reference);
}

### RUN GENCOV ###
if ($covgen == 1) {
    $bed = File::Temp->new(
                        TEMPLATE => 'bedb_XXXX',
                        DIR => $tempdir,
                        SUFFIX => '.tmp',
                        UNLINK => 1
    );
    PREPARING_ANNOT($bed);
}

foreach (@files) { RUN_ANALYSIS($_); }

unless ($usingr != 1) {
    if ($vcfsnp == 1) { COMPILATE_VCF(); RUN_R_VARIANT_SNPS(); }
    if ($covgen == 1) { COMPILATE_GENCOV(); RUN_R_COVERAGE(); }
}

sub MAIN_DIR {
    use Cwd 'abs_path';
    $maindir = abs_path($0);
    $maindir =~ s/CADIn//g;
}

sub TESTING_ARGUMENTS {

    # Advanced Options
    $qualit = 30;
    $filter = "gene";
    $tmp = "$maindir/tmp";
    $threds = 1;
    $output = "result_CADIn";
    # Type of analysis
    $vcfsnp = 1;
    $qltvcf = 10;
    $dp4var = 5;
    $covgen = 1;
    $covset = 50;
    $covlen = 50;
    $nregio = 5;
    # Statistical Parameters
    $usingr = 1;
    $median = 1;
    $graphr = 1;

    if (!($opt_i) || !($opt_r)  || !($opt_a)) {
        print "ERROR: Parameter -i is required. Please check if input is file or directory with files (BAM format)\n" if (!$opt_i);
        print "ERROR: Parameter -r is required. Please check the reference file (FASTA format)\n" if (!$opt_r);
        print "ERROR: Parameter -a is required. Please check the annotation file (GFF format)\n" if (!$opt_a);

        WARNING();

    } else {
        TESTING_INPUT();
        $tmp = "$opt_s/tmp" if (defined $opt_s);
        $qualit = $opt_q if (defined $opt_q);
        $filter = $opt_f if (defined $opt_f);
        $threds = $opt_t if (defined $opt_t);
        $output = $opt_o if (defined $opt_o);
        $vcfsnp = $opt_v if (defined $opt_v);
        $dp4var = $opt_d if (defined $opt_d);
        $qltvcf = $opt_k if (defined $opt_k);
        $covgen = $opt_c if (defined $opt_c);
        $covset = $opt_x if (defined $opt_x);
        $covlen = $opt_l if (defined $opt_l);
        $nregio = $opt_n if (defined $opt_n);
        $usingr = $opt_u if (defined $opt_u);
        $median = $opt_m if (defined $opt_m);
        $graphr = $opt_g if (defined $opt_g);
    }
    print "--- Running ---------------------\n";
    print "Input(-i):\t$opt_i\n";
    print "Reference(-r):\t$opt_r\n";
    print "Annotation(-a):\t$opt_a\n";
    print "MAP QUAL(-q):\t$qualit\n";
    print "Filter(-f):\t$filter\n";
    print "Temporary(-s):\t$tmp\n";
    print "Threads(-t):\t$threds\n";
    print "Output(-o):\t$output\n";
    print "SNPs(-v):\t$vcfsnp\n";
    if ($vcfsnp == 1) {
        print "Depth(-d):\t$dp4var\n";
        print  "SNP QUAL(-k):\t$qltvcf\n"; }
    print "Coverage(-c):\t$covgen\n";
    if ($covgen == 1) {
        print "Length GEN(-x):\t$covset\n";
        print "Length REG(-l):\t$covlen\n";
        print "Number REG(-n):\t$nregio\n"; }
    print "Statistics(-u):\t$usingr\n";
    if ($usingr == 1) {
        print "Median(-m):\t$median\n";
        print "Graphics (-g):\t$graphr\n";
    }
    print "------------------------------------\n";
}

sub WARNING {
    print "--- Parameters ---------------------\n";
    print "\t-i  BAM file(s).\n";
    print "\t-r  Fasta file containing reference sequence.\n";
    print "\t-a  GFF file containing annotation information.\n";
    print "--- Advanced Options ---------------\n";
    print "\t-q  Filter input(s) by mapping quality [INT] (default -q $qualit).\n";
    print "\t-f  Annotated region to be filtered ('gene', 'CDS', 'mRNA', 'tRNA', 'etc') (default -f $filter).\n";
    print "\t-s  Directory to save the temporary files (default -s $tmp).\n";
    print "\t-t  Number of threads to SAMTOOLS run [INT] (default -t $threds).\n";
    print "\t-o  Name for your output files (default -o $output).\n";
    print "--- Type of analysis ---------------\n";
    print "\t-v  Variant calling analysis (1), or not (0) (default -v $vcfsnp).\n";
    print "\t-d  Minimum number of reads to confirm each variant [INT] (default -d $dp4var) (require '-v 1').\n";
    print "\t-k  Minimum SNP quality for each variant [INT] (default -k $qltvcf) (require '-v 1').\n";
    print "\t-c  Genome/regions coverage analysis (1), or not (0) (default -c $covgen).\n";
    print "\t-x  Minimum covered length accepted in regions for calculating genome coverage (default -x $covset) (require '-c 1').\n";
    print "\t-l  Minimum covered length accepted in regions to be used for statistical analysis (default -l $covlen) (require '-c 1').\n";
    print "\t-n  Minimum number of regions accepted to validate chromosome aneuploidy. Number checked after Grubbs test (default -n $nregio) (require '-c 1').\n";
    print "--- Statistical Parameters ---------\n";
    print "\t-u  Determine if statistical analysis (1), or not (0), will be performed (default -u $usingr).\n";
    print "\t-m  Calculate using mean (0) or median (1) [INT] (default -m $median).\n";
    print "\t-g  Graphics generate with R: yes (1) or not (0) (default -g $graphr) (require '-u 1').\n";
    die "------------------------------------\n";
}

sub TESTING_INPUT {

    if (-d $opt_i) {

        opendir(DIR,$opt_i);
        my @DIR = readdir(DIR);
        closedir(DIR);

        foreach (@DIR) {
            chomp $_;
            next unless ($_ =~ /\.([Bb][Aa][Mm])$/);

            if (defined $files[0]) { push @files, "$opt_i/$_";
            } else { $files[0] = "$opt_i/$_"; }
        }
    } elsif (-f $opt_i) { $files[0] = $opt_i;
    } else {
        print "ERROR: Parameter -i is required. Please check if input is file or directory with files (BAM format).\n";
        WARNING();
    }
    unless (-f $opt_r) {
        print "ERROR: Parameter -r is required. Please check the reference file (FASTA format)\n";
        WARNING();
    }
    unless (-f $opt_a) {
        print "ERROR: Parameter -a is required. Please check the annotation file (GFF format)\n";
        WARNING();
    }
}

sub RUN_ANALYSIS {

    my $input = $_[0];

    my @split = split("\/",$input); my $file = $split[$#split]; $file =~ s/\.([Bb][Aa][Mm])//g;

    my $sorted = File::Temp->new(
                        TEMPLATE => 'sort_XXXX',
                        DIR => $tempdir,
                        SUFFIX => '.tmp',
                        UNLINK => 1
    );

    if ($qualit > 0) {

        my $mapqlt = File::Temp->new(
                            TEMPLATE => 'quality_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        system("samtools view -q $qualit -@ $threds -O BAM $input > $mapqlt");
        system("samtools sort -@ $threds $mapqlt > $sorted");

    } else { system("samtools sort -@ $threds $input > $sorted"); }

    system("samtools index $sorted");

    ### RUN MPILEUP ###
    if ($vcfsnp == 1) {

        my $snps = File::Temp->new(
                            TEMPLATE => 'vcf_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        my $rgns = File::Temp->new(
                            TEMPLATE => 'rgns_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        REGION_FASTA($rgns);

        my $plod = File::Temp->new(
                            TEMPLATE => 'plod_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        open(PDY,">",$plod); print PDY "* * * * 2"; close(PDY);

        system("bcftools mpileup --skip-indels -f $reference $sorted -R $rgns | bcftools call -m -v --ploidy-file $plod -Ov -o $snps");

        SAVE_DATA($snps,$file,"vcf");
    }

    ### RUN GENCOV ###
    if ($covgen == 1) {

        my $gencov = File::Temp->new(
                            TEMPLATE => 'gencov_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        system("samtools depth -b $bed $sorted -aa > $gencov");

        my $annot = File::Temp->new(
                            TEMPLATE => 'annot_XXXX',
                            DIR => $tempdir,
                            SUFFIX => '.tmp',
                            UNLINK => 1
        );

        GENCOV_MEMORY($gencov,$annot);

        SAVE_DATA($annot,$file,"genescov");
    }
}

sub REGION_FASTA {

    my ($regions) = @_;

    open(REG,">",$regions);

    open(REF, "$reference");

    while(<REF>) {

        chomp($_);

        next unless ($_ =~ /^>/);

        my @col = split(/\s+/,$_);

        $col[0] =~ s/>//g;

        print REG $col[0],"\n";
    }
    close(REG);
}

sub COMPILATE_VCF {

    my $combine = File::Temp->new(
                        TEMPLATE => 'freqvcf_XXXX',
                        DIR => $tempdir,
                        SUFFIX => '.tmp',
                        UNLINK => 1
    );

    open (COMBINE,">",$combine);

    print COMBINE "COD\tCHR\tFREQ\tCOUNT\n";

    my $vcfpath = "$output/vcf/";

    opendir(DIR,$vcfpath);
    my @DIRVCF = readdir(DIR);
    closedir(DIR);

    foreach my $file (@DIRVCF) {

        next unless ($file =~ /\.vcf$/);

        open (IN, "$vcfpath/$file");

        while (<IN>) {

            next if ($_ =~ /^#/);

            $file =~ s/\.vcf//g;

            my ($ref, $snp);

            if ($_ =~ /DP4=(\d+),(\d+),(\d+),(\d+);/) { $ref = $1+$2; $snp = $3+$4; }

            next if ($ref < $dp4var || $snp < $dp4var);

            my @colFilt = split(/\s+/,$_);

            next if ($colFilt[4] =~ /,/);

            next if ($colFilt[5] < $qltvcf);

            my $freq = sprintf("%.2f", $snp/($ref+$snp));

            my @split = split(/\s+/,$_); my $chr = shift(@split);

            if (defined $variant{"$file;ALL;$freq"}) { $variant{"$file;ALL;$freq"}++;
            } else { $variant{"$file;ALL;$freq"} = 1; }

            if (defined $variant{"$file;$chr;$freq"}) { $variant{"$file;$chr;$freq"}++;
            } else { $variant{"$file;$chr;$freq"} = 1; }


        }
        close(IN);
    }

    foreach (keys %variant) { my @sep = split(";",$_); print COMBINE $sep[0],"\t",$sep[1],"\t",$sep[2],"\t",$variant{$_},"\n"; }

    close(COMBINE);
    SAVE_DATA($combine,"frequencySNPs","statistical");
}

sub RUN_R_VARIANT_SNPS {

    if ($graphr == 1) {

        my $path = "statistical";

        my $inR = "$output/$path/frequencySNPs.csv";
        my $outR = "$output/$path";

        ### Start R

        my $R = Statistics::R->new();

        $R -> startR;

        ### Install Packages

        $R -> run(q`if(!require(ggplot2)){ install.packages("ggplot2")}`);

        ### Libraries

        $R -> run(q`library(ggplot2)`);

        ### ARGUMENTS
        $R -> set('infile', $inR);
        $R -> set('outdir', $outR);

        $R -> run(q`input = read.table(file = infile, header = TRUE, sep = "\t")`);

        #########################################################################################################################################################################################
        # GRAPHICS
        #########################################################################################################################################################################################
        mkdir ("$outR/frequency"); $R -> run(q`path = "frequency"`);
        #########################################################################################################################################################################################

        $R -> run(q`table = input[input[,2] == "ALL",]`);

        $R -> run(q`max_y = round(max(table$COUNT))+1`);

        #########################################################################################################################################################################################

        unless (@files == 1) {

            $R -> run(
                q`outfile = paste(c(outdir,path,"general.free.png"),collapse = "/")`,

                q`ggplot(table, aes(y=COUNT, x=FREQ)) + facet_wrap(~COD, scales = "free") +
                    geom_col() + xlim(0,1) +
                    theme(axis.title = element_blank(), axis.text = element_text(size=14),
                        strip.text.x = element_text(size = 12)) +
                    ggsave(outfile,width=16,height=10)`
            );

            $R -> run(
                q`outfile = paste(c(outdir,path,"general.fixed.png"),collapse = "/")`,

                q`ggplot(table, aes(y=COUNT, x=FREQ)) + facet_wrap(~COD, scales = "free_x") +
                    geom_col() + xlim(0,1) +
                    theme(axis.title = element_blank(), axis.text = element_text(size=14),
                        strip.text.x = element_text(size = 12)) +
                    ggsave(outfile,width=16,height=10)`
            );

        }

        #########################################################################################################################################################################################
        if (@files > 1) { mkdir ("$outR/frequency/sample"); $R -> run(q`path = "frequency/sample"`);
        #########################################################################################################################################################################################

            $R -> run(
                q`for (i in as.character(unique(table$COD))) {
                    outfile = paste(c(paste(c(outdir,path,i),collapse = "/"),"free.png"),collapse = ".")

                    newtable = table[table[,1] == i,]

                    ggplot(newtable, aes(y=COUNT, x=FREQ)) +
                        geom_col() + labs(title = i) + xlim(0,1) +
                        theme(title = element_text(size = 16), axis.title = element_blank(),
                            axis.text = element_text(size=14)) +
                        ggsave(outfile,width=11,height=9)
                }`
            );

        #########################################################################################################################################################################################
        }
        #########################################################################################################################################################################################
        mkdir ("$outR/frequency/chromosome");
        #########################################################################################################################################################################################
        # CHROMOSOMES

        $R -> run(q`table = input[input[,2] != "ALL",]`);

        #########################################################################################################################################################################################
        my $c = $R -> get(q`length(unique(table$CHR))`);
        if ($c > 1) { mkdir ("$outR/frequency/chromosome/each"); $R -> run(q`path = "frequency/chromosome/each"`); } else { $R -> run(q`path = "frequency/chromosome"`); }
        #########################################################################################################################################################################################

        $R -> run(
            q`for (i in as.character(unique(table$COD))) {

                newtable = table[table[,1] == i,]

                if (length(unique(table$CHR)) > 1) {

                    outfile = paste(c(paste(c(outdir,"frequency","chromosome",i),collapse = "/"),"chromosome.free.png"),collapse = ".")

                    ggplot(newtable, aes(y=COUNT, x=FREQ)) + facet_wrap(~CHR, scales = "free") +
                        geom_col() + labs(title = i) + xlim(0,1) +
                        theme(title = element_text(size = 16), axis.title = element_blank(),
                            axis.text = element_text(size=14), strip.text.x = element_text(size = 12)) +
                        ggsave(outfile,width=16,height=10)
                }

                for (j in as.character(unique(table$CHR))) {

                    chrtable = newtable[newtable[,2] == j,]

                    outfile = paste(c(paste(c(outdir,path,i),collapse = "/"),j,"chromosome.free.png"),collapse = ".")

                    nametitle = paste(c(i,j),collapse = " - ")

                    ggplot(chrtable, aes(y=COUNT, x=FREQ)) + geom_col() + xlim(0,1) + labs(title = nametitle) +
                        theme(title = element_text(size = 16), axis.title = element_blank(),
                            axis.text = element_text(size=14), strip.text.x = element_text(size = 12)) +
                        ggsave(outfile,width=11,height=9)
                }
            }`
        );
        #########################################################################################################################################################################################
        $R -> stop();
        system("rm -f Rplots.pdf");
    }
}

sub PREPARING_ANNOT {

    my ($gff) = @_;

    open (SAVE,">",$bed);

    open (GFF, $opt_a) or die "Could not open file '$opt_a'. $!";

    while (<GFF>) {

        next if ($_ =~ /^#/);

        chomp($_);

        my @col = split(/\s+/,$_);

        next unless ( (lc($col[2]) eq $filter) || (uc($col[2]) eq $filter));

        my $id = $col[8];
        if ($id ne $col[$#col]) { for (my $i = 9; $i <= $#col; $i++) { $id .= "_$col[$i]"; } }

        print SAVE $col[0],"\t",$col[3]-1,"\t",$col[4],"\t",$id,"\n";
    }
    close(SAVE); close(GFF);
}

sub GENCOV_MEMORY {

    my ($gcov,$sample) = @_;

    open (DEPTH, $gcov) or die "Could not open temporary file!";

    my $last;

    while (<DEPTH>) {

        chomp($_);

        my @col = split(/\s+/,$_);

        unless (defined $last) { $last = $col[0]; }

        unless ($last =~ /^$col[0]$/) { ANNOTATION_RECOVERY($last,$sample); }

        $covGenes{$col[1]} = $col[2];
        $last = $col[0];
    }

    ANNOTATION_RECOVERY($last,$sample);
}

sub ANNOTATION_RECOVERY {

    my ($cod,$ann) = @_;

    open (SAVE,">>",$ann);
    open (ANNOTATION, $bed) or die "Could not open temporary file!";

    while (<ANNOTATION>) {

        chomp($_);
        my @col = split(/\s+/,$_);

        next unless ($col[0] =~ /^$cod$/);

        my $count = 0; my @values;

        for (my $i = $col[1]+1; $i <= $col[2]; $i++) {

            unless (defined $covGenes{$i}) { die "Could not found position $i ($col[0]) in tables [Coverage]!"}

            if ($covGenes{$i} > 0) { $count++; }

            if (defined $values[0]) { push @values, $covGenes{$i};
            } else { $values[0] = $covGenes{$i}; }
        }

        my $cal;
        if ($median == 1) { $cal = CALCULATE_MEDIAN(\@values); } else { $cal = CALCULATE_MEAN(\@values); }
        my $map = $count/scalar(@values)*100;

        print SAVE $cod,"_",$col[1]+1,"-",$col[2],"\t";
        printf SAVE ("%.2f\t%.2f\t", $cal, $map);
        print SAVE $col[3],"\n";
    }
    close (ANNOTATION);
    close (SAVE);
    undef %covGenes;
}

sub COMPILATE_GENCOV {

    my $combine = File::Temp->new(
                        TEMPLATE => 'combcov_XXXX',
                        DIR => $tempdir,
                        SUFFIX => '.tmp',
                        UNLINK => 1
    );

    open (COMBINE,">",$combine);

    print COMBINE "COD\tCHR\tDEP\tCOV\tNOR\tID\n";

    my $genescov = "$output/genescov/";

    opendir(DIR,$genescov);
    my @PATHCOV = readdir(DIR);
    closedir(DIR);

    foreach my $file (@PATHCOV) {
        next unless ($file =~ /\.csv$/);

        my (@values, $cal);

        open(IN, "$genescov/$file") or die "Could not open file '$file'. $!";

        if (-z "$genescov/$file") { die "The file is empty '$file'. $!"; }

        while (<IN>) {

            my @col = split(/\s+/,$_);

            next if ($col[2] < $covset);

            if ($col[3] =~ /^ID=/) { my @id = split(";",$col[3]);
                $id[0] =~ s/ID=//g; $col[3] = $id[0];
            }

            if (defined $coverage{$col[0]}) { $coverage{$col[0]} .= "-".$col[3];
            } else { $coverage{$col[0]} = "$col[1];$col[2];$col[3]"; }

            if (defined $values[0]) { push @values, $col[1];
            } else { $values[0] = $col[1];}
        }

        close(IN);

        if ($median == 1) { $cal = CALCULATE_MEDIAN(\@values);
        } else { $cal = CALCULATE_MEAN(\@values); }

        $file =~ s/\.csv//g;

        foreach my $key (keys %coverage) {
            my @col = split(";",$coverage{$key});

            $key =~ s/(\_(\d+)\-(\d+))$//g;

            print COMBINE $file,"\t",$key,"\t",$col[0],"\t",$col[1],"\t",$cal,"\t",$col[2],"\n";
        }
        undef %coverage;
    }
    close (COMBINE);
    SAVE_DATA($combine,"combineCoverage","statistical");
}

sub RUN_R_COVERAGE {

    my $path = "statistical";
    my $inR = "$output/$path/combineCoverage.csv";
    my $outR = "$output/$path/";

    ### Start R

    my $R = Statistics::R->new();

    $R -> startR;

    ### Install Packages

    $R -> run(
        q`if(!require(ggplot2)){ install.packages("ggplot2")}`,
        q`if(!require(outliers)){ install.packages("outliers")}`
    );

    ### Libraries

    $R -> run(
        q`library(ggplot2)`,
        q`library(outliers)`
    );

    ### ARGUMENTS
    $R -> set('infile', $inR);
    $R -> set('outdir', $outR);
    $R -> set('covlen', $covlen);
    $R -> set('nregio', $nregio);

    $R -> run(
        q`tabela = read.table(file = infile, header = TRUE, sep = "\t")`,
        q`tabela = tabela[tabela[,4] >= covlen,]`,
        q`tabela$DEP = tabela$DEP/tabela$NOR`
    );

    #########################################################################################################################################################################################
    # REMOVING OUTLIERS

    $R -> run(
        q`removed_out = data.frame(COD = c(NA), CHR = c(NA), DEP = c(NA), COV = c(NA), NOR = c(NA), ID = c(NA))`,

        q`for (i in as.character(unique(tabela$COD))) {

            tcod = tabela[tabela$COD ==  i,]

            for (j in as.character(unique(tcod$CHR))) {

                loop = 0

                x = tcod[tcod$CHR ==  j,]

                while (loop == 0) {
                    if (length(x$DEP) < nregio ) { loop = 1
                    } else if (grubbs.test(x$DEP)$p.value < 0.05) { x = x[x[,3] != outlier(x$DEP),]
                    } else { loop = 1 }
                }

                if (length(x$DEP) >= nregio ) { removed_out = rbind(removed_out,x) }
            }
        }`,

        q`removed_out = removed_out[-c(1),]`,

    	q`wrc = 0`
    );

    # SAVE FILTERED TABLE

    $R -> run(
        q`if (nrow(removed_out) != 0) {
            outfile = paste(c(paste(c(outdir,"normalized.Cov"),collapse = "/"),"csv"),collapse = ".")
            removed_out = removed_out[,-c(4,5)]
            write.table(removed_out, file = outfile, sep = "\t", row.names = FALSE, append = FALSE)
            wrc = 1
        }`
    );

    my $wrc = $R -> get(q`wrc`);
    #########################################################################################################################################################################################
    # WILCOXON TEST

    if ($wrc == 1) {

        $R -> run(
            q`result_wilcoxon = data.frame(library = c(NA), chromosome = c(NA), p_less_0.5 = c(NA), p_less_1 = c(NA), p_greater_1 = c(NA), p_greater_1.5 = c(NA), p_greater_2 = c(NA),
                p_greater_2.5 = c(NA), p_greater_3 = c(NA), p_greater_3.5 = c(NA), p_greater_4 = c(NA), p_greater_4.5 = c(NA), p_greater_5 = c(NA),
                mean = c(NA), median = c(NA), sd = c(NA))`
        );

        $R -> run(
            q`for (i in as.character(unique(removed_out$COD))) {

                for (j in as.character(unique(removed_out$CHR))) {

                    x = removed_out[removed_out[,1] ==  i & removed_out[,2] ==  j,]

                    rl05 = wilcox.test(x$DEP, mu = 0.5, alternative = "less")  # Wilcoxon-signed-Rank test
                    rl1 = wilcox.test(x$DEP, mu = 1, alternative = "less")  # Wilcoxon-signed-Rank test
                    rg1 = wilcox.test(x$DEP, mu = 1, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg15 = wilcox.test(x$DEP, mu = 1.5, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg2 = wilcox.test(x$DEP, mu = 2, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg25 = wilcox.test(x$DEP, mu = 2.5, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg3 = wilcox.test(x$DEP, mu = 3, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg35 = wilcox.test(x$DEP, mu = 3.5, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg4 = wilcox.test(x$DEP, mu = 4, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg45 = wilcox.test(x$DEP, mu = 4.5, alternative = "greater")  # Wilcoxon-signed-Rank test
                    rg5 = wilcox.test(x$DEP, mu = 5, alternative = "greater")  # Wilcoxon-signed-Rank test

                    result_wilcoxon = rbind(result_wilcoxon,c(i, j, rl05$p.value, rl1$p.value, rg1$p.value, rg15$p.value, rg2$p.value,
                        rg25$p.value, rg3$p.value, rg35$p.value, rg4$p.value, rg45$p.value, rg5$p.value,
                        mean(x$DEP), median(x$DEP), sd(x$DEP)))
                }
            }`
        );

        $R -> run(
            q`result_wilcoxon = result_wilcoxon[-c(1),]`
        );

        # SAVE WILCOX TESTS RESULTS

        $R -> run(
            q`outfile = paste(c(paste(c(outdir,"wilcoxon_rank.Cov"),collapse = "/"),"csv"),collapse = ".")`,
            q`write.table(result_wilcoxon,file = outfile, sep = "\t", row.names = FALSE, append = FALSE)`
        );

    } else { print "No calculate Wilcoxon rank test! Doesn't have values enough.\n";}
    #########################################################################################################################################################################################
    # GRAPHICS

    if ($wrc == 1 && $graphr == 1) { mkdir ("$output/$path/coverage");

        #####################################################################################################################################################################################

        unless (@files == 1) {

            $R -> run(
                q`outfile = paste(c(outdir,"coverage","ALL.nofilter.fixed.png"),collapse = "/")`,

                q`ggplot(tabela, aes(x = as.factor(CHR), y = DEP)) + facet_wrap(~COD, scales = "free_x") +
                    geom_boxplot(outlier.size = 0.5, outlier.shape = 1) + geom_hline(aes(yintercept=1), colour = "red") +
                    theme(axis.title = element_blank(), axis.text.y = element_text(size = 16),
                        axis.text.x = element_text(size = 12, angle = 90),
                        strip.text.x = element_text(size = 24)) +
                    ggsave(outfile,width=16,height=9)`,

                q`outfile = paste(c(outdir,"coverage","ALL.nofilter.free.png"),collapse = "/")`,

                q`ggplot(tabela, aes(x = as.factor(CHR), y = DEP)) + facet_wrap(~COD, scales = "free") +
                    geom_boxplot(outlier.size = 0.5, outlier.shape = 1) + geom_hline(aes(yintercept=1), colour = "red") +
                    theme(axis.title = element_blank(), axis.text.y = element_text(size = 16),
                        axis.text.x = element_text(size = 12, angle = 90),
                        strip.text.x = element_text(size = 24)) +
                    ggsave(outfile,width=16,height=9)`,

                q`outfile = paste(c(outdir,"coverage","ALL.normalized.fixed.png"),collapse = "/")`,

                q`ggplot(removed_out, aes(x = as.factor(CHR), y = DEP)) + facet_wrap(~COD, scales = "free_x") +
                    geom_boxplot(outlier.size = 0.5, outlier.shape = 1) + geom_hline(aes(yintercept=1), colour = "red") +
                    theme(axis.title = element_blank(), axis.text.y = element_text(size = 16),
                        axis.text.x = element_text(size = 12, angle = 90),
                        strip.text.x = element_text(size = 24)) +
                    ggsave(outfile,width=16,height=9)`,

                q`outfile = paste(c(outdir,"coverage","ALL.normalized.free.png"),collapse = "/")`,

                q`ggplot(removed_out, aes(x = as.factor(CHR), y = DEP)) + facet_wrap(~COD, scales = "free") +
                    geom_boxplot(outlier.size = 0.5, outlier.shape = 1) + geom_hline(aes(yintercept=1), colour = "red") +
                    theme(axis.title = element_blank(), axis.text.y = element_text(size = 16),
                        axis.text.x = element_text(size = 12, angle = 90),
                        strip.text.x = element_text(size = 24)) +
                    ggsave(outfile,width=16,height=9)`
            );

        }

        #####################################################################################################################################################################################
        my $c = $R -> get(q`length(unique(removed_out$COD))`);
        if ($c > 1) { mkdir ("$output/$path/coverage/each"); $R -> run(q`path = "coverage/each"`); } else { $R -> run(q`path = "coverage"`); }
        #####################################################################################################################################################################################
        # EACH SAMPLE

        $R -> run(
            q`max_y = round(max(removed_out$DEP))+1`,

            q`for (i in as.character(unique(removed_out$COD))) {

                outfile = paste(c(paste(c(outdir,path,i),collapse = "/"),"fixed.png"),collapse = ".")

                newtable = removed_out[removed_out[,1] == i,]

                ggplot(newtable, aes(x = as.factor(CHR), y = DEP)) +
                    geom_boxplot(outlier.size = 0.5, outlier.shape = 1) + geom_hline(aes(yintercept=1), colour = "red") + ylim(0, max_y) +
                    theme(axis.title = element_blank(), axis.text.y = element_text(size = 16),
                        axis.text.x = element_text(size = 12, angle = 90),
                        strip.text.x = element_text(size = 24)) +
                    ggsave(outfile,width=16,height=9)
            }`
        );
        #####################################################################################################################################################################################
    }
    #########################################################################################################################################################################################
    $R -> stop();
    system("rm -f Rplots.pdf");
    #########################################################################################################################################################################################
}

sub SAVE_DATA {
    my ($info, $cod, $path) = @_;
    unless (-d $output) { mkdir ($output); }
    unless (-d "$output/$path") { mkdir ("$output/$path"); }

    if ($path eq "vcf") { copy($info, "$output/$path/$cod.$path");
    } else { copy($info, "$output/$path/$cod.csv");}
}

sub CALCULATE_MEAN {
    my $i = 0;

    my @tmp = @{$_[0]};

    foreach (@tmp) {
        chomp($_);
        $i += $_;
    }

    my $result = $i/scalar(@tmp);

    return ($result);
}

sub CALCULATE_MEDIAN {

    my $result;

    my @tmp = @{$_[0]};

    my @sorted = sort { $a <=> $b } @tmp;

    if (scalar(@sorted)%2 == 0) {
        my $pos = scalar(@sorted)/2;
        $result = $sorted[$pos-1] + $sorted[$pos];
        $result/=2;
    } else {
        my $pos = scalar(@sorted)+1;
        $pos/=2;
        $result = $sorted[$pos];
    }

    return ($result);
}
